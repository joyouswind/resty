worker_processes 1;

events {
    worker_connections 1024;
}

http {
    log_format main '$remote_addr\t[$time_iso8601]\t$request_uri\t'
    '$status\t$body_bytes_sent\t$http_referer\t$http_user_agent\t$http_x_forwarded_for\t'
    '$request_time\t$upstream_response_time\t$upstream_addr\t$upstream_status\t$upstream_cache_status';
    
    error_log  /var/log/nginx/error.log notice;
    access_log  /var/log/nginx/access.log  main;

    proxy_buffering on;
    proxy_cache_path /data/proxy_cache levels=1:2 keys_zone=cache_zone:512m inactive=1m max_size=2g;

    server {
	listen 80;
        listen 443 ssl;
        server_name proxy.mudu.tv;

        ssl_certificate /etc/openresty/ssl/server.crt;
        ssl_certificate_key /etc/openresty/ssl/server.key;
	
	resolver 8.8.8.8 ipv6=off;

        location / {
            proxy_cache cache_zone;
            proxy_cache_key $host$request_uri;
            proxy_cache_valid 200 10m;
            proxy_cache_lock on;
            proxy_cache_lock_timeout 8s;

            #if ($arg_vhost ~* ^(.+)$) {
            #   set $target_host $1;
            #}
            #proxy_pass https://$target_host;
            #proxy_pass https://10.20.11.102:4780;
            #proxy_set_header Host $target_host;
            #proxy_set_header X-Real-IP $remote_addr;
            #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

	    content_by_lua_block {
                local http = require "resty.http"
                
		-- 设置转发Url
		local target_server = ngx.var.scheme .. "://" .. ngx.var.arg_vhost .. ngx.var.uri
		ngx.log(ngx.NOTICE, "target_server= ", target_server)
		
		-- 设置代理服务器的地址和端口
		local proxy_url = "http://10.20.11.102:4780"
		ngx.log(ngx.NOTICE, "proxy_url= ", proxy_url)
		
		-- 通过代理转发请求
		local httpc = http.new()
                
		-- 设置代理服务器的用户名和密码
                -- local proxy_user = "username"
                -- local proxy_pass = "password"

		httpc:set_proxy_options {
			http_proxy = proxy_url,
			https_proxy = proxy_url
		}
	
		local res,err = httpc:request_uri(target_server, {
			ssl_verify = false,
			keepalive_timeout = 5000,
			-- headers = {
			--	["User-Agent"] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.85 Safari/537.36"
			-- }
		})

		if not res then
			ngx.status = 500
			ngx.say("Internal Server Error: " .. err)
			ngx.log(ngx.ERR, "Internal Server Error: " .. err)
			return ngx.exit(ngx.HTTP_OK)
		end

		-- 获取代理请求的返回结果
		ngx.status = res.status
		ngx.say(res.body)

            	if res.status == 200 then
			ngx.req.set_header("X-Proxy-Cache", "MISS")
			ngx.var.proxy_cache_key = "$host$request_uri"
			ngx.var.proxy_cache_bypass = "$http_cache_control"
		else
			ngx.set_header("X-Proxy-Cache", "BYPASS")
		end
	
	    }
        }
    }
}

